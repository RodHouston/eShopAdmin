{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport { addPhotos } from \"./productRedux\";\nexport default function AddPhotoToFireBase(files) {\n  let pho = [];\n  let itemsProcessed = 0;\n  let itemsProcessed1 = 0;\n  console.log(\"upload photo\");\n  console.log(files); //  console.log(idx);\n\n  files.map((file, idx) => {\n    const fileName = new Date().getTime() + file.name;\n    const storage = getStorage(app);\n    const StorageRef = ref(storage, fileName);\n    const uploadTask = uploadBytesResumable(StorageRef, file); // Register three observers:\n    // 1. 'state_changed' observer, called any time the state changes\n    // 2. Error observer, called on failure\n    // 3. Completion observer, called on successful completion\n\n    uploadTask.on('state_changed', snapshot => {\n      // Observe state change events such as progress, pause, and resume\n      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n      const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      console.log('Upload is ' + progress + '% done');\n\n      switch (snapshot.state) {\n        case 'paused':\n          console.log('Upload is paused');\n          break;\n\n        case 'running':\n          console.log('Upload is running');\n          break;\n\n        default:\n      }\n\n      console.log('Upload is ' + progress + '% done');\n    }, error => {\n      // Handle unsuccessful uploads\n      console.log(error);\n    }, async () => {\n      // Handle successful uploads on complete\n      // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n      await getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n        console.log('File available at', downloadURL);\n        pho.push(downloadURL);\n        return console.log(pho);\n      });\n    });\n  });\n  console.log(pho);\n}\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","addPhotos","AddPhotoToFireBase","files","pho","itemsProcessed","itemsProcessed1","console","log","map","file","idx","fileName","Date","getTime","name","storage","StorageRef","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","state","error","then","downloadURL","push"],"mappings":"AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,oBAA1B,EAAgDC,cAAhD,QAAsE,kBAAtE;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAAoC;AAE/C,MAAIC,GAAG,GAAE,EAAT;AAEA,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,eAAe,GAAG,CAAtB;AACEC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACCD,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAP4C,CAQ7C;;AAGDA,EAAAA,KAAK,CAACM,GAAN,CAAU,CAACC,IAAD,EAAOC,GAAP,KAAe;AACxB,UAAMC,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuBJ,IAAI,CAACK,IAA7C;AACA,UAAMC,OAAO,GAAGpB,UAAU,CAACI,GAAD,CAA1B;AACA,UAAMiB,UAAU,GAAGpB,GAAG,CAACmB,OAAD,EAAUJ,QAAV,CAAtB;AAEA,UAAMM,UAAU,GAAGpB,oBAAoB,CAACmB,UAAD,EAAaP,IAAb,CAAvC,CALwB,CAMxB;AACA;AACA;AACA;;AACAQ,IAAAA,UAAU,CAACC,EAAX,CAAc,eAAd,EACGC,QAAD,IAAc;AACZ;AACA;AACA,YAAMC,QAAQ,GAAID,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GAArE;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAea,QAAf,GAA0B,QAAtC;;AACA,cAAQD,QAAQ,CAACI,KAAjB;AACE,aAAK,QAAL;AACEjB,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA;;AACF,aAAK,SAAL;AACED,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA;;AACF;AAPF;;AASAD,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAea,QAAf,GAA0B,QAAtC;AACD,KAhBH,EAiBGI,KAAD,IAAW;AACT;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;AAA4B,KAnBhC,EAoBI,YAAY;AACZ;AACA;AACF,YAAM1B,cAAc,CAACmB,UAAU,CAACE,QAAX,CAAoBvB,GAArB,CAAd,CAAwC6B,IAAxC,CAA8CC,WAAD,IAAiB;AAChEpB,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCmB,WAAjC;AACAvB,QAAAA,GAAG,CAACwB,IAAJ,CAASD,WAAT;AACA,eAAOpB,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CAAP;AACD,OAJG,CAAN;AAKC,KA5BH;AA6BG,GAvCJ;AAyCDG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AAEH;KAtDuBF,kB","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\nimport { addPhotos } from \"./productRedux\";\n\nexport default function AddPhotoToFireBase(files)  {    \n  \n    let pho= []\n      \n    let itemsProcessed = 0\n    let itemsProcessed1 = 0      \n      console.log(\"upload photo\");\n       console.log(files);\n      //  console.log(idx);\n\n\n     files.map((file, idx) => { \n      const fileName = new Date().getTime() + file.name;\n      const storage = getStorage(app)\n      const StorageRef = ref(storage, fileName)\n\n      const uploadTask = uploadBytesResumable(StorageRef, file);\n      // Register three observers:\n      // 1. 'state_changed' observer, called any time the state changes\n      // 2. Error observer, called on failure\n      // 3. Completion observer, called on successful completion\n      uploadTask.on('state_changed',\n        (snapshot) => {\n          // Observe state change events such as progress, pause, and resume\n          // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log('Upload is ' + progress + '% done');\n          switch (snapshot.state) {\n            case 'paused':\n              console.log('Upload is paused');\n              break;\n            case 'running':\n              console.log('Upload is running');\n              break;\n            default:\n          }\n          console.log('Upload is ' + progress + '% done');\n        },\n        (error) => {\n          // Handle unsuccessful uploads\n          console.log(error);        },\n          async () => {\n          // Handle successful uploads on complete\n          // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n        await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n            console.log('File available at', downloadURL);\n            pho.push(downloadURL)\n            return console.log(pho);\n          });    \n        });      \n        })      \n      \n    console.log(pho);\n    \n}\n"]},"metadata":{},"sourceType":"module"}