{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\nexport default function AddPhotoToFireBase(files, product, dispatch) {\n  console.log(\"inFire\");\n  console.log(files);\n  console.log(product.morePhotos);\n  let pho = [];\n  product === null || product === void 0 ? void 0 : product.morePhotos.map(photo => pho.push(photo));\n  console.log(product.morePhotos);\n  let itemsProcessed = 0;\n  let itemsProcessed1 = 0;\n  console.log(\"upload photo\");\n  console.log(files); //  console.log(idx);\n  //  files.map((file, idx) => { \n  //   const fileName = new Date().getTime() + file.name;\n  //   const storage = getStorage(app)\n  //   const StorageRef = ref(storage, fileName)\n  //   const uploadTask = uploadBytesResumable(StorageRef, file);\n  //   // Register three observers:\n  //   // 1. 'state_changed' observer, called any time the state changes\n  //   // 2. Error observer, called on failure\n  //   // 3. Completion observer, called on successful completion\n  //   uploadTask.on('state_changed',\n  //     (snapshot) => {\n  //       // Observe state change events such as progress, pause, and resume\n  //       // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n  //       const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n  //       console.log('Upload is ' + progress + '% done');\n  //       switch (snapshot.state) {\n  //         case 'paused':\n  //           console.log('Upload is paused');\n  //           break;\n  //         case 'running':\n  //           console.log('Upload is running');\n  //           break;\n  //         default:\n  //       }\n  //       console.log('Upload is ' + progress + '% done');\n  //     },\n  //     (error) => {\n  //       // Handle unsuccessful uploads\n  //       console.log(error);        },\n  //       async () => {\n  //       // Handle successful uploads on complete\n  //       // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n  //     await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n  //         console.log('File available at', downloadURL);\n  //         // pho.push(downloadURL)\n  //         pho[idx] = downloadURL\n  //         itemsProcessed++\n  //         let pro={};\n  //         if(itemsProcessed >= files.length){\n  //              pro = {...product, morePhotos: pho }\n  //               console.log(pro);\n  //              updateProducts(pro._id, pro, dispatch)\n  //             return pro;\n  //         }\n  //       });    \n  //     });      \n  //     })      \n\n  console.log(pho);\n}\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","addPhotos","updateProducts","AddPhotoToFireBase","files","product","dispatch","console","log","morePhotos","pho","map","photo","push","itemsProcessed","itemsProcessed1"],"mappings":"AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,oBAA1B,EAAgDC,cAAhD,QAAsE,kBAAtE;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,OAAnC,EAA4CC,QAA5C,EAAuD;AACpEC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,UAApB;AACE,MAAIC,GAAG,GAAE,EAAT;AACAL,EAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEI,UAAT,CAAoBE,GAApB,CAAwBC,KAAK,IACzBF,GAAG,CAACG,IAAJ,CAASD,KAAT,CADJ;AAGAL,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,UAApB;AAEA,MAAIK,cAAc,GAAG,CAArB;AACA,MAAIC,eAAe,GAAG,CAAtB;AACER,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACCD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAb+D,CAchE;AAGF;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAEH;KArEuBP,kB","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\n\nexport default function AddPhotoToFireBase(files, product, dispatch)  {    \n  console.log(\"inFire\");\n  console.log(files);\n  console.log(product.morePhotos);\n    let pho =[]\n    product?.morePhotos.map(photo =>\n        pho.push(photo)\n    )\n    console.log(product.morePhotos);\n      \n    let itemsProcessed = 0\n    let itemsProcessed1 = 0      \n      console.log(\"upload photo\");\n       console.log(files);\n      //  console.log(idx);\n\n\n    //  files.map((file, idx) => { \n    //   const fileName = new Date().getTime() + file.name;\n    //   const storage = getStorage(app)\n    //   const StorageRef = ref(storage, fileName)\n\n    //   const uploadTask = uploadBytesResumable(StorageRef, file);\n    //   // Register three observers:\n    //   // 1. 'state_changed' observer, called any time the state changes\n    //   // 2. Error observer, called on failure\n    //   // 3. Completion observer, called on successful completion\n    //   uploadTask.on('state_changed',\n    //     (snapshot) => {\n    //       // Observe state change events such as progress, pause, and resume\n    //       // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n    //       const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    //       console.log('Upload is ' + progress + '% done');\n    //       switch (snapshot.state) {\n    //         case 'paused':\n    //           console.log('Upload is paused');\n    //           break;\n    //         case 'running':\n    //           console.log('Upload is running');\n    //           break;\n    //         default:\n    //       }\n    //       console.log('Upload is ' + progress + '% done');\n    //     },\n    //     (error) => {\n    //       // Handle unsuccessful uploads\n    //       console.log(error);        },\n    //       async () => {\n    //       // Handle successful uploads on complete\n    //       // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n    //     await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n    //         console.log('File available at', downloadURL);\n    //         // pho.push(downloadURL)\n    //         pho[idx] = downloadURL\n    //         itemsProcessed++\n    //         let pro={};\n    //         if(itemsProcessed >= files.length){\n    //              pro = {...product, morePhotos: pho }\n    //               console.log(pro);\n    //              updateProducts(pro._id, pro, dispatch)\n    //             return pro;\n    //         }\n            \n    //       });    \n    //     });      \n    //     })      \n      \n    console.log(pho);\n    \n}\n"]},"metadata":{},"sourceType":"module"}