{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\nexport default function AddPhotoToFireBase(files1, product, dispatch) {\n  let pho = [];\n  let files = new Array(files1);\n  product === null || product === void 0 ? void 0 : product.morePhotos.map((photo, idx) => {\n    if (files[0][idx] == null) {\n      pho[idx] = photo;\n      files[0][idx] = photo;\n    } else if (files[0][idx] != null) {\n      pho[idx] = files[0][idx];\n    }\n  });\n  let itemsProcessed = 0;\n  let itemsProcessed1 = 0;\n  let haveFiles = false;\n  files[0].map((file, idx) => {\n    if (typeof file == \"object\") {\n      haveFiles = true;\n      const fileName = product._id + (file === null || file === void 0 ? void 0 : file.name);\n      const storage = getStorage(app);\n      const StorageRef = ref(storage, fileName);\n      const uploadTask = uploadBytesResumable(StorageRef, file); // Register three observers:\n      // 1. 'state_changed' observer, called any time the state changes\n      // 2. Error observer, called on failure\n      // 3. Completion observer, called on successful completion\n\n      uploadTask.on('state_changed', snapshot => {\n        // Observe state change events such as progress, pause, and resume\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log('Upload is ' + progress + '% done');\n\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n\n          case 'running':\n            console.log('Upload is running');\n            break;\n\n          default:\n        }\n\n        console.log('Upload is ' + progress + '% done');\n      }, error => {\n        // Handle unsuccessful uploads\n        console.log(error);\n      }, async () => {\n        // Handle successful uploads on complete\n        // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n        await getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          console.log('File available at', downloadURL); // pho.push(downloadURL)\n\n          pho[idx] = downloadURL;\n          itemsProcessed++;\n          let pro = {};\n\n          if (itemsProcessed >= files.length) {\n            pro = { ...product,\n              morePhotos: pho\n            };\n            console.log(pro);\n            updateProducts(pro._id, pro, dispatch);\n            console.log(\"Success, we need to REFRSH\");\n            return pro;\n          }\n        });\n      });\n    }\n  });\n\n  if (!haveFiles) {\n    console.log(\"We dont have files and need to REFRSH\");\n  }\n\n  console.log(pho);\n}\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","addPhotos","updateProducts","AddPhotoToFireBase","files1","product","dispatch","pho","files","Array","morePhotos","map","photo","idx","itemsProcessed","itemsProcessed1","haveFiles","file","fileName","_id","name","storage","StorageRef","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","console","log","state","error","then","downloadURL","pro","length"],"mappings":"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","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\n\nexport default function AddPhotoToFireBase(files1, product, dispatch) {\n\n    let pho = []\n    let files = new Array(files1)\n\n    product?.morePhotos.map((photo, idx) => {\n        if (files[0][idx] == null) {\n            pho[idx] = photo\n            files[0][idx] = photo\n        } else if (files[0][idx] != null) {\n            pho[idx] = files[0][idx]\n        }\n    })\n\n    let itemsProcessed = 0\n    let itemsProcessed1 = 0\n    let haveFiles = false\n    files[0].map((file, idx) => {\n\n        if (typeof file == \"object\") {\n            haveFiles = true\n            const fileName = product._id + file?.name;\n            const storage = getStorage(app)\n            const StorageRef = ref(storage, fileName)\n            const uploadTask = uploadBytesResumable(StorageRef, file);\n            // Register three observers:\n            // 1. 'state_changed' observer, called any time the state changes\n            // 2. Error observer, called on failure\n            // 3. Completion observer, called on successful completion\n            uploadTask.on('state_changed', (snapshot) => {\n                // Observe state change events such as progress, pause, and resume\n                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                console.log('Upload is ' + progress + '% done');\n                switch (snapshot.state) {\n                    case 'paused':\n                        console.log('Upload is paused');\n                        break;\n                    case 'running':\n                        console.log('Upload is running');\n                        break;\n                    default:\n                }\n                console.log('Upload is ' + progress + '% done');\n            },\n            (error) => {\n                // Handle unsuccessful uploads\n                console.log(error);\n            },\n            async () => {\n                // Handle successful uploads on complete\n                // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n                await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n                    console.log('File available at', downloadURL);\n                    // pho.push(downloadURL)\n                    pho[idx] = downloadURL\n                    itemsProcessed++\n                    let pro = {};\n                    if (itemsProcessed >= files.length) {\n                        pro = { ...product, morePhotos: pho }\n                        console.log(pro);\n                        updateProducts(pro._id, pro, dispatch)\n                        console.log(\"Success, we need to REFRSH\");\n                        return pro;\n                    }\n\n                });\n            });\n        }\n\n    })\n    if (!haveFiles) {\n        console.log(\"We dont have files and need to REFRSH\");        \n    }\n    console.log(pho);\n\n}\n"]},"metadata":{},"sourceType":"module"}