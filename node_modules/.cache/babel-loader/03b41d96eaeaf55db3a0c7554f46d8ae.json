{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport { addPhotos } from \"./productRedux\";\nexport default function AddPhotoToFireBase(file) {\n  // const extraPhotos = useSelector(state => state.product.extraPhotos)\n  // const dispatch = useDispatch()\n  console.log(\"TRYING TO GET HERE\");\n  let pho;\n  console.log(\"multi insde upload\");\n  let itemsProcessed = 0;\n  let itemsProcessed1 = 0;\n  console.log(\"upload photo\");\n  console.log(file); //  console.log(idx);\n\n  const fileName = new Date().getTime() + file.name;\n  const storage = getStorage(app);\n  const StorageRef = ref(storage, fileName);\n  const uploadTask = uploadBytesResumable(StorageRef, file); // Register three observers:\n  // 1. 'state_changed' observer, called any time the state changes\n  // 2. Error observer, called on failure\n  // 3. Completion observer, called on successful completion\n\n  uploadTask.on('state_changed', snapshot => {\n    // Observe state change events such as progress, pause, and resume\n    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n    const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n    console.log('Upload is ' + progress + '% done');\n\n    switch (snapshot.state) {\n      case 'paused':\n        console.log('Upload is paused');\n        break;\n\n      case 'running':\n        console.log('Upload is running');\n        break;\n\n      default:\n    }\n\n    console.log('Upload is ' + progress + '% done');\n  }, error => {\n    // Handle unsuccessful uploads\n    console.log(error);\n  }, async () => {\n    // Handle successful uploads on complete\n    // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n    await getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n      console.log('File available at', downloadURL);\n      pho = downloadURL;\n    });\n  });\n  console.log(pho);\n  return pho;\n}\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","addPhotos","AddPhotoToFireBase","file","console","log","pho","itemsProcessed","itemsProcessed1","fileName","Date","getTime","name","storage","StorageRef","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","state","error","then","downloadURL"],"mappings":"AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,oBAA1B,EAAgDC,cAAhD,QAAsE,kBAAtE;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,eAAe,SAASC,kBAAT,CAA4BC,IAA5B,EAAmC;AAC9C;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,MAAIC,GAAJ;AAEAF,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,MAAIE,cAAc,GAAG,CAArB;AACA,MAAIC,eAAe,GAAG,CAAtB;AAEEJ,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACCD,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAX2C,CAY5C;;AACA,QAAMM,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuBR,IAAI,CAACS,IAA7C;AACA,QAAMC,OAAO,GAAGjB,UAAU,CAACI,GAAD,CAA1B;AACA,QAAMc,UAAU,GAAGjB,GAAG,CAACgB,OAAD,EAAUJ,QAAV,CAAtB;AAEA,QAAMM,UAAU,GAAGjB,oBAAoB,CAACgB,UAAD,EAAaX,IAAb,CAAvC,CAjB4C,CAkB5C;AACA;AACA;AACA;;AACAY,EAAAA,UAAU,CAACC,EAAX,CAAc,eAAd,EACGC,QAAD,IAAc;AACZ;AACA;AACA,UAAMC,QAAQ,GAAID,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GAArE;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAea,QAAf,GAA0B,QAAtC;;AACA,YAAQD,QAAQ,CAACI,KAAjB;AACE,WAAK,QAAL;AACEjB,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA;;AACF,WAAK,SAAL;AACED,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA;;AACF;AAPF;;AASAD,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAea,QAAf,GAA0B,QAAtC;AACD,GAhBH,EAiBGI,KAAD,IAAW;AACT;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;AAA4B,GAnBhC,EAoBI,YAAY;AACZ;AACA;AACH,UAAMvB,cAAc,CAACgB,UAAU,CAACE,QAAX,CAAoBpB,GAArB,CAAd,CAAwC0B,IAAxC,CAA6C,MAAOC,WAAP,IAAuB;AACrEpB,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCmB,WAAjC;AACAlB,MAAAA,GAAG,GAAGkB,WAAN;AACD,KAHE,CAAN;AAIE,GA3BH;AA4BFpB,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,SAAOA,GAAP;AACH;KApDuBJ,kB","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\nimport { addPhotos } from \"./productRedux\";\n\nexport default function AddPhotoToFireBase(file)  {\n    // const extraPhotos = useSelector(state => state.product.extraPhotos)\n    // const dispatch = useDispatch()\n    console.log(\"TRYING TO GET HERE\");\n    let pho;  \n\n    console.log(\"multi insde upload\");      \n    let itemsProcessed = 0\n    let itemsProcessed1 = 0   \n   \n      console.log(\"upload photo\");\n       console.log(file);\n      //  console.log(idx);\n      const fileName = new Date().getTime() + file.name;\n      const storage = getStorage(app)\n      const StorageRef = ref(storage, fileName)\n\n      const uploadTask = uploadBytesResumable(StorageRef, file);\n      // Register three observers:\n      // 1. 'state_changed' observer, called any time the state changes\n      // 2. Error observer, called on failure\n      // 3. Completion observer, called on successful completion\n      uploadTask.on('state_changed',\n        (snapshot) => {\n          // Observe state change events such as progress, pause, and resume\n          // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log('Upload is ' + progress + '% done');\n          switch (snapshot.state) {\n            case 'paused':\n              console.log('Upload is paused');\n              break;\n            case 'running':\n              console.log('Upload is running');\n              break;\n            default:\n          }\n          console.log('Upload is ' + progress + '% done');\n        },\n        (error) => {\n          // Handle unsuccessful uploads\n          console.log(error);        },\n          async () => {\n          // Handle successful uploads on complete\n          // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n       await getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n            console.log('File available at', downloadURL);\n            pho = downloadURL\n          });         \n        })        \n    console.log(pho);\n    return pho\n}\n"]},"metadata":{},"sourceType":"module"}