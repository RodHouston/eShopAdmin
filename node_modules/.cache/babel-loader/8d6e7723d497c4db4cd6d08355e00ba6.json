{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\nexport default function AddPhotoToFireBase(files1, mainFile, product, isMainPhoto, isExtraPhotos, dispatch) {\n  console.log('inside Add to Firebae');\n  let pho = [];\n  let mainPho = '';\n  let files = new Array(files1); // console.log(isExtraPhotos);\n  // console.log(files1);\n  // console.log(isMainPhoto);\n  // console.log(mainFile);\n\n  product === null || product === void 0 ? void 0 : product.morePhotos.map((photo, idx) => {\n    if (files[0][idx] == null) {\n      pho[idx] = photo;\n      files[0][idx] = photo;\n    } else if (files[0][idx] != null) {\n      pho[idx] = files[0][idx];\n    }\n  });\n  files[0].push(mainFile);\n  console.log(files);\n  let itemsProcessed = 0;\n  let itemsProcessed1 = 0;\n  let haveFiles = false;\n  files[0].map((file, idx) => {\n    console.log(idx);\n    console.log(file);\n\n    if (typeof file == \"object\") {\n      haveFiles = true;\n      const fileName = file === null || file === void 0 ? void 0 : file.name;\n      const storage = getStorage(app);\n      const StorageRef = ref(storage, `images/productImages/${product._id}/${fileName}`);\n      const uploadTask = uploadBytesResumable(StorageRef, file); // Register three observers:\n      // 1. 'state_changed' observer, called any time the state changes\n      // 2. Error observer, called on failure\n      // 3. Completion observer, called on successful completion\n\n      uploadTask.on('state_changed', snapshot => {\n        // Observe state change events such as progress, pause, and resume\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log('Upload is ' + progress + '% done');\n\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n\n          case 'running':\n            console.log('Upload is running');\n            break;\n\n          default:\n        }\n\n        console.log('Upload is ' + progress + '% done');\n      }, error => {\n        // Handle unsuccessful uploads\n        console.log(error);\n      }, async () => {\n        // Handle successful uploads on complete\n        // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n        await getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          console.log('File available at', downloadURL); // pho.push(downloadURL)\n\n          console.log(idx);\n          console.log(downloadURL);\n          pho[idx] = downloadURL;\n\n          if (idx == files.length - 1) {\n            console.log('inside isMainPhoto');\n            console.log(idx);\n            console.log(downloadURL);\n            mainPho = downloadURL;\n          }\n\n          itemsProcessed++;\n          let pro = {};\n\n          if (idx >= files.length - 1) {\n            if (isMainPhoto) {\n              pro = { ...product,\n                img: mainPho\n              };\n            }\n\n            if (isExtraPhotos) {\n              pro = { ...product,\n                morePhotos: pho\n              };\n            }\n\n            console.log(pro);\n            updateProducts(pro._id, pro, dispatch);\n            console.log(\"Success, we need to REFRSH\");\n            return pro;\n          }\n        });\n      });\n    }\n  }); // if (!haveFiles) {\n  //     console.log(\"We dont have files and need to REFRSH\");        \n  // }\n\n  console.log(pho);\n}\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","addPhotos","updateProducts","AddPhotoToFireBase","files1","mainFile","product","isMainPhoto","isExtraPhotos","dispatch","console","log","pho","mainPho","files","Array","morePhotos","map","photo","idx","push","itemsProcessed","itemsProcessed1","haveFiles","file","fileName","name","storage","StorageRef","_id","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","state","error","then","downloadURL","length","pro","img"],"mappings":"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","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\n\nexport default function AddPhotoToFireBase(files1, mainFile, product, isMainPhoto, isExtraPhotos, dispatch) {\n    console.log('inside Add to Firebae');\n\n    let pho = []\n    let mainPho = ''\n    let files = new Array(files1)\n    \n    // console.log(isExtraPhotos);\n    // console.log(files1);\n    // console.log(isMainPhoto);\n    // console.log(mainFile);\n    \n\n    product?.morePhotos.map((photo, idx) => {\n        if (files[0][idx] == null) {\n            pho[idx] = photo\n            files[0][idx] = photo\n        } else if (files[0][idx] != null) {\n            pho[idx] = files[0][idx]\n        }\n    })\n    files[0].push(mainFile)\n\nconsole.log(files);\n\n    let itemsProcessed = 0\n    let itemsProcessed1 = 0\n    let haveFiles = false\n    files[0].map((file, idx) => {\n        console.log(idx);\n        console.log(file);\n        if (typeof file == \"object\") {\n            haveFiles = true\n            const fileName = file?.name;\n            const storage = getStorage(app)\n            const StorageRef = ref(storage, `images/productImages/${product._id}/${fileName}`)\n            const uploadTask = uploadBytesResumable(StorageRef, file);\n            // Register three observers:\n            // 1. 'state_changed' observer, called any time the state changes\n            // 2. Error observer, called on failure\n            // 3. Completion observer, called on successful completion\n            uploadTask.on('state_changed', (snapshot) => {\n                // Observe state change events such as progress, pause, and resume\n                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                console.log('Upload is ' + progress + '% done');\n                switch (snapshot.state) {\n                    case 'paused':\n                        console.log('Upload is paused');\n                        break;\n                    case 'running':\n                        console.log('Upload is running');\n                        break;\n                    default:\n                }\n                console.log('Upload is ' + progress + '% done');\n            },\n            (error) => {\n                // Handle unsuccessful uploads\n                console.log(error);\n            },\n            async () => {\n                // Handle successful uploads on complete\n                // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n                await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n                    console.log('File available at', downloadURL);\n                    // pho.push(downloadURL)\n                    console.log(idx);\n                    console.log(downloadURL);\n                                          \n                        pho[idx] = downloadURL\n\n                   if(idx == files.length-1){\n                       console.log('inside isMainPhoto');\n                       console.log(idx);\n                       console.log(downloadURL);\n                        mainPho = downloadURL\n\n                    }\n                    \n                    itemsProcessed++\n                    let pro = {};\n                    if (idx>= files.length-1) {\n                        if(isMainPhoto){\n                            pro = { ...product, img: mainPho }\n                        }\n                        if (isExtraPhotos){\n                            pro = { ...product, morePhotos: pho }                        }\n                        \n                        console.log(pro);\n                        updateProducts(pro._id, pro, dispatch)\n                        console.log(\"Success, we need to REFRSH\");\n                        return pro;\n                    }\n\n                });\n            });\n        }\n\n    })\n    // if (!haveFiles) {\n    //     console.log(\"We dont have files and need to REFRSH\");        \n    // }\n    console.log(pho);\n\n}\n"]},"metadata":{},"sourceType":"module"}