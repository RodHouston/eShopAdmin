{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    currentUser: null,\n    users: [],\n    isFetching: false,\n    error: false\n  },\n  reducers: {\n    loginStart: state => {\n      state.isFetching = true;\n    },\n    loginSuccess: (state, action) => {\n      state.isFetching = false;\n      state.currentUser = action.payload;\n    },\n    loginFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    },\n    logOut: state => {\n      state.currentUser = null;\n    },\n    //get all\n    getUsersStart: state => {\n      state.isFetching = true;\n      state.error = false;\n    },\n    getUsersSuccess: (state, action) => {\n      console.log(action.payload);\n      state.isFetching = false;\n      state.users = action.payload;\n    },\n    getUsersFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    },\n    //get delete\n    deleteUserStart: state => {\n      state.isFetching = true;\n      state.error = false;\n    },\n    deleteUserSuccess: (state, action) => {\n      state.isFetching = false;\n      state.users.splice(state.users.findIndex(item => item._id === action.payload), 1);\n    },\n    deleteUserFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    },\n    // update product\n    updateUserStart: state => {\n      state.isFetching = true;\n      state.error = false;\n    },\n    updateUserSuccess: (state, action) => {\n      state.isFetching = false;\n      state.products[state.products.findIndex(item => item._id === action.payload.id)] = action.payload.product;\n    },\n    updateUserFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logOut,\n  getUsersSuccess,\n  getUsersStart,\n  getUsersFailure,\n  deleteUserSuccess,\n  deleteUserStart,\n  deleteUserFailure,\n  updateUserStart,\n  updateUserSuccess,\n  updateUserFailure\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/userRedux.js"],"names":["createSlice","userSlice","name","initialState","currentUser","users","isFetching","error","reducers","loginStart","state","loginSuccess","action","payload","loginFailure","logOut","getUsersStart","getUsersSuccess","console","log","getUsersFailure","deleteUserStart","deleteUserSuccess","splice","findIndex","item","_id","deleteUserFailure","updateUserStart","updateUserSuccess","products","id","product","updateUserFailure","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice  } from \"@reduxjs/toolkit\";\n\nconst userSlice = createSlice({\n    name: \"user\",\n    initialState: {\n       currentUser: null,\n       users: [],\n       isFetching: false,\n       error: false\n    },\n    reducers:{\n        loginStart:(state)=>{\n            state.isFetching=true;\n        },\n        loginSuccess:(state, action)=>{\n            state.isFetching=false;\n            state.currentUser=action.payload;\n        },\n        loginFailure:(state)=>{\n            state.isFetching=false;\n            state.error = true;\n        },    \n        \n        logOut: (state) => {\n            state.currentUser = null\n        },\n     //get all\n     getUsersStart: (state) => {\n        state.isFetching = true     \n        state.error = false\n      },\n      getUsersSuccess: (state, action) => {\n        console.log(action.payload);\n        state.isFetching = false\n        state.users = action.payload\n      },\n      getUsersFailure: (state) => {\n        state.isFetching = false\n        state.error = true\n      },\n        //get delete\n      deleteUserStart: (state) => {\n        state.isFetching = true \n        state.error = false\n      },\n      deleteUserSuccess: (state, action) => {\n        state.isFetching = false\n        state.users.splice(\n            state.users.findIndex((item) => item._id === action.payload),\n            1\n        )\n      },\n      deleteUserFailure: (state) => {\n        state.isFetching = false\n        state.error = true\n      },\n  \n  // update product\n      updateUserStart: (state) => {\n        state.isFetching = true \n        state.error = false\n      },\n      updateUserSuccess: (state, action) => {\n        state.isFetching = false\n        state.products[\n          state.products.findIndex((item) => item._id === action.payload.id)\n        ] = action.payload.product;\n      },\n  \n      updateUserFailure: (state) => {\n        state.isFetching = false\n        state.error = true\n      },\n  \n  \n    },\n  });\nexport const { loginStart, loginSuccess, loginFailure , logOut, getUsersSuccess,getUsersStart,getUsersFailure,\ndeleteUserSuccess,deleteUserStart, deleteUserFailure, updateUserStart, updateUserSuccess, updateUserFailure} = userSlice.actions;\nexport default userSlice.reducer;"]},"metadata":{},"sourceType":"module"}