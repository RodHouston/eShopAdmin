{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nexport default async function AddPhotoToFireBase(multiPhotos) {\n  _s();\n\n  const extraPhotos = useSelector(state => state.product.extraPhotos);\n  let pho = [];\n  console.log(multiPhotos);\n  console.log(extraPhotos); // console.log(\"multi insde upload\");\n  // console.log(extraPhotos);\n  // console.log(multiPhotos);\n  // let itemsProcessed = 0\n  // if (multiPhotos.length <= 0) {\n  // //   handleUpdate()\n  // }\n  // await multiPhotos.map((file, idx) => {\n  //   console.log(\"upload photo\");\n  //   //  console.log(file);\n  //   //  console.log(idx);\n  //   const fileName = new Date().getTime() + file.name;\n  //   const storage = getStorage(app)\n  //   const StorageRef = ref(storage, fileName)\n  //   const uploadTask = uploadBytesResumable(StorageRef, file);\n  //   // Register three observers:\n  //   // 1. 'state_changed' observer, called any time the state changes\n  //   // 2. Error observer, called on failure\n  //   // 3. Completion observer, called on successful completion\n  //   uploadTask.on('state_changed',\n  //     (snapshot) => {\n  //       // Observe state change events such as progress, pause, and resume\n  //       // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n  //       const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n  //       console.log('Upload is ' + progress + '% done');\n  //       switch (snapshot.state) {\n  //         case 'paused':\n  //           console.log('Upload is paused');\n  //           break;\n  //         case 'running':\n  //           console.log('Upload is running');\n  //           break;\n  //         default:\n  //       }\n  //       console.log('Upload is ' + progress + '% done');\n  //     },\n  //     (error) => {\n  //       // Handle unsuccessful uploads\n  //       console.log(error);\n  //     },\n  //     async () => {\n  //       // Handle successful uploads on complete\n  //       // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n  //    await getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n  //         console.log('File available at', downloadURL);\n  //         // await dispatch(addPhotos(downloadURL))\n  //         pho.push(downloadURL)\n  //         console.log(extraPhotos);\n  //         console.log(pho);\n  //         // setMultiPhotosUpload(multiPhotosUpload => [...multiPhotosUpload, downloadURL])\n  //         // photos.push(downloadURL)   \n  //       });\n  //       console.log(itemsProcessed);\n  //     })\n  // //     itemsProcessed++\n  // //   if (itemsProcessed === multiPhotos.length) {\n  // //     console.log(\"bout tot call update\");\n  // //     // setInputs(product => [...product, inputs])\n  // //     console.log(extraPhotos);\n  // //     console.log(\"running UPDATE\");\n  // //     // handleUpdate()\n  // //   }\n  // }\n  // );\n\n  return pho;\n}\n\n_s(AddPhotoToFireBase, \"aPoRrITsQl5RwZ2efwYwSJ0S4lk=\", false, function () {\n  return [useSelector];\n});\n\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","AddPhotoToFireBase","multiPhotos","extraPhotos","state","product","pho","console","log"],"mappings":";;AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,oBAA1B,EAAgDC,cAAhD,QAAsE,kBAAtE;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,eAAe,eAAgBC,kBAAhB,CAAmCC,WAAnC,EAAgD;AAAA;;AAE3D,QAAMC,WAAW,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcF,WAAxB,CAA/B;AACA,MAAIG,GAAG,GAAG,EAAV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ,EAL2D,CAM3D;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,SAAOG,GAAP;AACH;;GA5E8BL,kB;UAEPN,W;;;KAFOM,kB","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\n\nexport default async  function AddPhotoToFireBase(multiPhotos) {\n\n    const extraPhotos = useSelector(state => state.product.extraPhotos)\n    let pho = []\n    console.log(multiPhotos);\n    console.log(extraPhotos);\n    // console.log(\"multi insde upload\");\n    // console.log(extraPhotos);\n    // console.log(multiPhotos);\n    // let itemsProcessed = 0\n    // if (multiPhotos.length <= 0) {\n    // //   handleUpdate()\n    // }\n\n    // await multiPhotos.map((file, idx) => {\n    //   console.log(\"upload photo\");\n    //   //  console.log(file);\n    //   //  console.log(idx);\n    //   const fileName = new Date().getTime() + file.name;\n    //   const storage = getStorage(app)\n    //   const StorageRef = ref(storage, fileName)\n\n    //   const uploadTask = uploadBytesResumable(StorageRef, file);\n    //   // Register three observers:\n    //   // 1. 'state_changed' observer, called any time the state changes\n    //   // 2. Error observer, called on failure\n    //   // 3. Completion observer, called on successful completion\n    //   uploadTask.on('state_changed',\n    //     (snapshot) => {\n    //       // Observe state change events such as progress, pause, and resume\n    //       // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n    //       const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    //       console.log('Upload is ' + progress + '% done');\n    //       switch (snapshot.state) {\n    //         case 'paused':\n    //           console.log('Upload is paused');\n    //           break;\n    //         case 'running':\n    //           console.log('Upload is running');\n    //           break;\n    //         default:\n    //       }\n    //       console.log('Upload is ' + progress + '% done');\n    //     },\n    //     (error) => {\n    //       // Handle unsuccessful uploads\n    //       console.log(error);\n    //     },\n    //     async () => {\n    //       // Handle successful uploads on complete\n    //       // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n    //    await getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n    //         console.log('File available at', downloadURL);\n    //         // await dispatch(addPhotos(downloadURL))\n    //         pho.push(downloadURL)\n    //         console.log(extraPhotos);\n    //         console.log(pho);\n    //         // setMultiPhotosUpload(multiPhotosUpload => [...multiPhotosUpload, downloadURL])\n    //         // photos.push(downloadURL)   \n            \n    //       });\n    //       console.log(itemsProcessed);\n    //     })\n    // //     itemsProcessed++\n    // //   if (itemsProcessed === multiPhotos.length) {\n    // //     console.log(\"bout tot call update\");\n\n    // //     // setInputs(product => [...product, inputs])\n    // //     console.log(extraPhotos);\n    // //     console.log(\"running UPDATE\");\n    // //     // handleUpdate()\n       \n    // //   }\n    // }\n    // );\n    return pho\n}\n"]},"metadata":{},"sourceType":"module"}