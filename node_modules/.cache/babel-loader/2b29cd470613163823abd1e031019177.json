{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nexport const addPhotoToFireBase = async multiPhotos => {\n  _s();\n\n  const extraPhotos = useSelector(state => state.product.extraPhotos);\n  console.log(\"multi insde upload\");\n  console.log(extraPhotos);\n  console.log(multiPhotos);\n  let itemsProcessed = 0;\n\n  if (multiPhotos.length <= 0) {\n    handleUpdate();\n  }\n\n  await multiPhotos.map((file, idx) => {\n    console.log(\"upload photo\"); //  console.log(file);\n    //  console.log(idx);\n\n    const fileName = new Date().getTime() + file.name;\n    const storage = getStorage(app);\n    const StorageRef = ref(storage, fileName);\n    const uploadTask = uploadBytesResumable(StorageRef, file); // Register three observers:\n    // 1. 'state_changed' observer, called any time the state changes\n    // 2. Error observer, called on failure\n    // 3. Completion observer, called on successful completion\n\n    uploadTask.on('state_changed', snapshot => {\n      // Observe state change events such as progress, pause, and resume\n      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n      const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      console.log('Upload is ' + progress + '% done');\n\n      switch (snapshot.state) {\n        case 'paused':\n          console.log('Upload is paused');\n          break;\n\n        case 'running':\n          console.log('Upload is running');\n          break;\n\n        default:\n      }\n\n      console.log('Upload is ' + progress + '% done');\n    }, error => {\n      // Handle unsuccessful uploads\n      console.log(error);\n    }, async () => {\n      // Handle successful uploads on complete\n      // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n      await getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n        console.log('File available at', downloadURL);\n        await dispatch(addPhotos(downloadURL));\n        console.log(extraPhotos); // setMultiPhotosUpload(multiPhotosUpload => [...multiPhotosUpload, downloadURL])\n        // photos.push(downloadURL)   \n      });\n      console.log(itemsProcessed);\n    });\n    itemsProcessed++;\n\n    if (itemsProcessed === multiPhotos.length) {\n      console.log(\"bout tot call update\"); // setInputs(product => [...product, inputs])\n\n      console.log(extraPhotos);\n      console.log(\"running UPDATE\");\n      handleUpdate();\n    }\n  });\n};\n\n_s(addPhotoToFireBase, \"aPoRrITsQl5RwZ2efwYwSJ0S4lk=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","addPhotoToFireBase","multiPhotos","extraPhotos","state","product","console","log","itemsProcessed","length","handleUpdate","map","file","idx","fileName","Date","getTime","name","storage","getStorage","app","StorageRef","ref","uploadTask","uploadBytesResumable","on","snapshot","progress","bytesTransferred","totalBytes","error","getDownloadURL","then","downloadURL","dispatch","addPhotos"],"mappings":";;AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,WAAP,IAAuB;AAAA;;AAErD,QAAMC,WAAW,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcF,WAAxB,CAA/B;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACA,MAAIM,cAAc,GAAG,CAArB;;AACA,MAAIN,WAAW,CAACO,MAAZ,IAAsB,CAA1B,EAA6B;AAC3BC,IAAAA,YAAY;AACb;;AAED,QAAMR,WAAW,CAACS,GAAZ,CAAgB,CAACC,IAAD,EAAOC,GAAP,KAAe;AACnCP,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADmC,CAEnC;AACA;;AACA,UAAMO,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuBJ,IAAI,CAACK,IAA7C;AACA,UAAMC,OAAO,GAAGC,UAAU,CAACC,GAAD,CAA1B;AACA,UAAMC,UAAU,GAAGC,GAAG,CAACJ,OAAD,EAAUJ,QAAV,CAAtB;AAEA,UAAMS,UAAU,GAAGC,oBAAoB,CAACH,UAAD,EAAaT,IAAb,CAAvC,CARmC,CASnC;AACA;AACA;AACA;;AACAW,IAAAA,UAAU,CAACE,EAAX,CAAc,eAAd,EACGC,QAAD,IAAc;AACZ;AACA;AACA,YAAMC,QAAQ,GAAID,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GAArE;AACAvB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeoB,QAAf,GAA0B,QAAtC;;AACA,cAAQD,QAAQ,CAACtB,KAAjB;AACE,aAAK,QAAL;AACEE,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA;;AACF,aAAK,SAAL;AACED,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA;;AACF;AAPF;;AASAD,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeoB,QAAf,GAA0B,QAAtC;AACD,KAhBH,EAiBGG,KAAD,IAAW;AACT;AACAxB,MAAAA,OAAO,CAACC,GAAR,CAAYuB,KAAZ;AACD,KApBH,EAqBE,YAAY;AACV;AACA;AACH,YAAMC,cAAc,CAACR,UAAU,CAACG,QAAX,CAAoBJ,GAArB,CAAd,CAAwCU,IAAxC,CAA6C,MAAOC,WAAP,IAAuB;AACrE3B,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC0B,WAAjC;AACA,cAAMC,QAAQ,CAACC,SAAS,CAACF,WAAD,CAAV,CAAd;AACA3B,QAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ,EAHqE,CAIrE;AACA;AAED,OAPE,CAAN;AAQGG,MAAAA,OAAO,CAACC,GAAR,CAAYC,cAAZ;AACD,KAjCH;AAkCEA,IAAAA,cAAc;;AAChB,QAAIA,cAAc,KAAKN,WAAW,CAACO,MAAnC,EAA2C;AACzCH,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EADyC,CAGzC;;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAG,MAAAA,YAAY;AAEb;AACF,GAzDK,CAAN;AA2DH,CAvEM;;GAAMT,kB;UAEWD,W","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\n\n\nexport const addPhotoToFireBase = async (multiPhotos) => {\n\n    const extraPhotos = useSelector(state => state.product.extraPhotos)\n\n    console.log(\"multi insde upload\");\n    console.log(extraPhotos);\n    console.log(multiPhotos);\n    let itemsProcessed = 0\n    if (multiPhotos.length <= 0) {\n      handleUpdate()\n    }\n\n    await multiPhotos.map((file, idx) => {\n      console.log(\"upload photo\");\n      //  console.log(file);\n      //  console.log(idx);\n      const fileName = new Date().getTime() + file.name;\n      const storage = getStorage(app)\n      const StorageRef = ref(storage, fileName)\n\n      const uploadTask = uploadBytesResumable(StorageRef, file);\n      // Register three observers:\n      // 1. 'state_changed' observer, called any time the state changes\n      // 2. Error observer, called on failure\n      // 3. Completion observer, called on successful completion\n      uploadTask.on('state_changed',\n        (snapshot) => {\n          // Observe state change events such as progress, pause, and resume\n          // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log('Upload is ' + progress + '% done');\n          switch (snapshot.state) {\n            case 'paused':\n              console.log('Upload is paused');\n              break;\n            case 'running':\n              console.log('Upload is running');\n              break;\n            default:\n          }\n          console.log('Upload is ' + progress + '% done');\n        },\n        (error) => {\n          // Handle unsuccessful uploads\n          console.log(error);\n        },\n        async () => {\n          // Handle successful uploads on complete\n          // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n       await getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n            console.log('File available at', downloadURL);\n            await dispatch(addPhotos(downloadURL))\n            console.log(extraPhotos);\n            // setMultiPhotosUpload(multiPhotosUpload => [...multiPhotosUpload, downloadURL])\n            // photos.push(downloadURL)   \n            \n          });\n          console.log(itemsProcessed);\n        })\n        itemsProcessed++\n      if (itemsProcessed === multiPhotos.length) {\n        console.log(\"bout tot call update\");\n\n        // setInputs(product => [...product, inputs])\n        console.log(extraPhotos);\n        console.log(\"running UPDATE\");\n        handleUpdate()\n       \n      }\n    }\n    );\n}\n"]},"metadata":{},"sourceType":"module"}