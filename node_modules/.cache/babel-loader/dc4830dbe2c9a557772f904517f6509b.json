{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\nexport default function AddPhotoToFireBase(files1, mainFile, product, isMainPhoto, isExtraPhotos, dispatch) {\n  console.log('inside Add to Firebae');\n  let pho = [];\n  let mainPho = mainFile;\n  let files = new Array(files1); // console.log(isExtraPhotos);\n  // console.log(files1);\n  // console.log(isMainPhoto);\n  // console.log(mainFile);\n\n  product === null || product === void 0 ? void 0 : product.morePhotos.map((photo, idx) => {\n    if (files[0][idx] == null) {\n      pho[idx] = photo;\n      files[0][idx] = photo;\n    } else if (files[0][idx] != null) {\n      pho[idx] = files[0][idx];\n    }\n  });\n  files[0].push({\n    main: mainFile\n  });\n  console.log(files);\n  let itemsProcessed = 0;\n  let itemsProcessed1 = 0;\n  let haveFiles = false;\n  let isSuccesful = false;\n  files[0].map((fil, idx) => {\n    let file;\n    itemsProcessed++;\n    console.log(idx);\n    console.log(fil.main);\n\n    if (idx >= files[0].length - 1) {\n      console.log(\"in switch case 1\");\n      file = fil.main;\n    } else {\n      console.log(\"in case 2\");\n      file = fil;\n    }\n\n    console.log(\"after change\");\n    console.log(file);\n\n    if (typeof file == \"object\") {\n      var _file;\n\n      haveFiles = true;\n      const fileName = (_file = file) === null || _file === void 0 ? void 0 : _file.name;\n      const storage = getStorage(app);\n      const StorageRef = ref(storage, `images/productImages/${product._id}/${fileName}`);\n      const uploadTask = uploadBytesResumable(StorageRef, file); // Register three observers:\n      // 1. 'state_changed' observer, called any time the state changes\n      // 2. Error observer, called on failure\n      // 3. Completion observer, called on successful completion\n\n      uploadTask.on('state_changed', snapshot => {\n        // Observe state change events such as progress, pause, and resume\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log('Upload is ' + progress + '% done');\n\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n\n          case 'running':\n            console.log('Upload is running');\n            break;\n\n          default:\n        }\n\n        console.log('Upload is ' + progress + '% done');\n      }, error => {\n        // Handle unsuccessful uploads\n        console.log(error);\n      }, async () => {\n        // Handle successful uploads on complete\n        // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n        await getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          console.log('File available at', downloadURL); // pho.push(downloadURL)\n\n          if (idx <= files[0].length - 2) {\n            console.log('in more file');\n            pho[idx] = downloadURL;\n            isSuccesful = true;\n          }\n\n          if (idx >= files[0].length - 1) {\n            console.log(\"in main pho\");\n            mainPho = downloadURL;\n            isSuccesful = true;\n          }\n        });\n        console.log(\"hre\");\n        let pro = {};\n\n        if (itemsProcessed >= files[0].length - 1 && isSuccesful) {\n          if (isExtraPhotos || isMainPhoto) {\n            pro = { ...product,\n              img: mainPho,\n              morePhotos: pho\n            };\n          }\n\n          updateProducts(pro._id, pro, dispatch);\n          console.log(\"Success, we need to REFRSH\");\n          return pro;\n        }\n      });\n    }\n  }); // if (!haveFiles) {\n  //     console.log(\"We dont have files and need to REFRSH\");        \n  // }\n\n  console.log(pho);\n}\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","addPhotos","updateProducts","AddPhotoToFireBase","files1","mainFile","product","isMainPhoto","isExtraPhotos","dispatch","console","log","pho","mainPho","files","Array","morePhotos","map","photo","idx","push","main","itemsProcessed","itemsProcessed1","haveFiles","isSuccesful","fil","file","length","fileName","name","storage","StorageRef","_id","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","state","error","then","downloadURL","pro","img"],"mappings":"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","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\n\nexport default function AddPhotoToFireBase(files1, mainFile, product, isMainPhoto, isExtraPhotos, dispatch) {\n    console.log('inside Add to Firebae');\n\n    let pho = []\n    let mainPho = mainFile\n    let files = new Array(files1)\n\n    // console.log(isExtraPhotos);\n    // console.log(files1);\n    // console.log(isMainPhoto);\n    // console.log(mainFile);\n\n\n    product?.morePhotos.map((photo, idx) => {\n        if (files[0][idx] == null) {\n            pho[idx] = photo\n            files[0][idx] = photo\n        } else if (files[0][idx] != null) {\n            pho[idx] = files[0][idx]\n        }\n    })\n    files[0].push({ main: mainFile })\n\n    console.log(files);\n\n    let itemsProcessed = 0\n    let itemsProcessed1 = 0\n    let haveFiles = false\n    let isSuccesful = false\n\n    files[0].map((fil, idx) => {\n        let file;\n        itemsProcessed++\n        console.log(idx);\n        console.log(fil.main);\n\n        if(idx >= files[0].length-1){\n            console.log(\"in switch case 1\");\n            file = fil.main\n        }else{\n            console.log(\"in case 2\");\n            file = fil\n        }\n        console.log(\"after change\");\n        console.log(file);\n        if (typeof file == \"object\") {\n            haveFiles = true\n            \n            const fileName = file?.name;\n            const storage = getStorage(app)\n            const StorageRef = ref(storage, `images/productImages/${product._id}/${fileName}`)\n            const uploadTask = uploadBytesResumable(StorageRef, file);\n            // Register three observers:\n            // 1. 'state_changed' observer, called any time the state changes\n            // 2. Error observer, called on failure\n            // 3. Completion observer, called on successful completion\n            uploadTask.on('state_changed', (snapshot) => {\n                // Observe state change events such as progress, pause, and resume\n                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                console.log('Upload is ' + progress + '% done');\n                switch (snapshot.state) {\n                    case 'paused':\n                        console.log('Upload is paused');\n                        break;\n                    case 'running':\n                        console.log('Upload is running');\n                        break;\n                    default:\n                }\n                console.log('Upload is ' + progress + '% done');\n            },\n                (error) => {\n                    // Handle unsuccessful uploads\n                    console.log(error);\n                },\n                async () => {\n                    // Handle successful uploads on complete\n                    // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n                    await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n                        console.log('File available at', downloadURL);\n                        // pho.push(downloadURL)\n\n\n                        \n                        if (idx <= files[0].length - 2) {                           \n                            console.log('in more file');                            \n                            pho[idx] = downloadURL\n                            isSuccesful = true\n                        }\n                        if (idx >= files[0].length - 1) {                        \n                            console.log(\"in main pho\");                            \n                            mainPho = downloadURL\n                            isSuccesful = true\n                        }\n                      \n                        \n                       \n                      \n                       \n                    });\n                    console.log(\"hre\");\n                    let pro = {};\n                    if (itemsProcessed >= files[0].length - 1 && isSuccesful) {                            \n                        if (isExtraPhotos || isMainPhoto) {\n                            pro = { ...product, img: mainPho, morePhotos: pho }\n                        }\n                \n                        \n                        updateProducts(pro._id, pro, dispatch)\n                        console.log(\"Success, we need to REFRSH\");\n                        return pro;\n                    }\n            \n            \n                });\n        }\n       \n    })\n       \n       \n    \n   \n    \n\n    // if (!haveFiles) {\n    //     console.log(\"We dont have files and need to REFRSH\");        \n    // }\n    console.log(pho);\n\n}\n"]},"metadata":{},"sourceType":"module"}