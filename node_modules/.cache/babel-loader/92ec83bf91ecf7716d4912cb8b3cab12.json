{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\nexport default function AddPhotoToFireBase(files1, mainFile, product, isMainPhoto, isExtraPhotos) {\n  _s();\n\n  console.log('inside Add to Firebae');\n  const dispatch = useDispatch();\n  let pho = [];\n  let files = [];\n  console.log('heree');\n  console.log(isExtraPhotos);\n  console.log(files1);\n  console.log(isMainPhoto);\n  console.log(mainFile);\n  product === null || product === void 0 ? void 0 : product.morePhotos.map((photo, idx) => {\n    if (files[0][idx] == null) {\n      pho[idx] = photo;\n      files[0][idx] = photo;\n    } else if (files[0][idx] != null) {\n      pho[idx] = files[0][idx];\n    }\n  }); // let itemsProcessed = 0\n  // let itemsProcessed1 = 0\n  // let haveFiles = false\n  // files[0].map((file, idx) => {\n  //     if (typeof file == \"object\") {\n  //         haveFiles = true\n  //         const fileName = file?.name;\n  //         const storage = getStorage(app)\n  //         const StorageRef = ref(storage, `images/productImages/${product._id}/${fileName}`)\n  //         const uploadTask = uploadBytesResumable(StorageRef, file);\n  //         // Register three observers:\n  //         // 1. 'state_changed' observer, called any time the state changes\n  //         // 2. Error observer, called on failure\n  //         // 3. Completion observer, called on successful completion\n  //         uploadTask.on('state_changed', (snapshot) => {\n  //             // Observe state change events such as progress, pause, and resume\n  //             // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n  //             const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n  //             console.log('Upload is ' + progress + '% done');\n  //             switch (snapshot.state) {\n  //                 case 'paused':\n  //                     console.log('Upload is paused');\n  //                     break;\n  //                 case 'running':\n  //                     console.log('Upload is running');\n  //                     break;\n  //                 default:\n  //             }\n  //             console.log('Upload is ' + progress + '% done');\n  //         },\n  //         (error) => {\n  //             // Handle unsuccessful uploads\n  //             console.log(error);\n  //         },\n  //         async () => {\n  //             // Handle successful uploads on complete\n  //             // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n  //             await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n  //                 console.log('File available at', downloadURL);\n  //                 // pho.push(downloadURL)\n  //                 pho[idx] = downloadURL\n  //                 itemsProcessed++\n  //                 let pro = {};\n  //                 if (itemsProcessed >= files.length) {\n  //                     if(isMainPhoto){\n  //                         pro = { ...product, img: pho }\n  //                     }else if (isMorePhoto){\n  //                         pro = { ...product, morePhotos: pho }\n  //                     }\n  //                     pro = { ...product, morePhotos: pho }\n  //                     console.log(pro);\n  //                     updateProducts(pro._id, pro, dispatch)\n  //                     console.log(\"Success, we need to REFRSH\");\n  //                     return pro;\n  //                 }\n  //             });\n  //         });\n  //     }\n  // })\n  // if (!haveFiles) {\n  //     console.log(\"We dont have files and need to REFRSH\");        \n  // }\n\n  console.log(pho);\n}\n\n_s(AddPhotoToFireBase, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","addPhotos","updateProducts","AddPhotoToFireBase","files1","mainFile","product","isMainPhoto","isExtraPhotos","console","log","dispatch","pho","files","morePhotos","map","photo","idx"],"mappings":";;AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,oBAA1B,EAAgDC,cAAhD,QAAsE,kBAAtE;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,eAAe,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,QAApC,EAA8CC,OAA9C,EAAuDC,WAAvD,EAAoEC,aAApE,EAAmF;AAAA;;AAC9FC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AACC,MAAIkB,GAAG,GAAG,EAAV;AACA,MAAIC,KAAK,GAAG,EAAZ;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAGAC,EAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEQ,UAAT,CAAoBC,GAApB,CAAwB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACpC,QAAIJ,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,KAAiB,IAArB,EAA2B;AACvBL,MAAAA,GAAG,CAACK,GAAD,CAAH,GAAWD,KAAX;AACAH,MAAAA,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,IAAgBD,KAAhB;AACH,KAHD,MAGO,IAAIH,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,KAAiB,IAArB,EAA2B;AAC9BL,MAAAA,GAAG,CAACK,GAAD,CAAH,GAAWJ,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,CAAX;AACH;AACJ,GAPD,EAZ8F,CAuB9F;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAEH;;GA1FuBT,kB;UAEJT,W;;;KAFIS,kB","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\n\nexport default function AddPhotoToFireBase(files1, mainFile, product, isMainPhoto, isExtraPhotos) {\n    console.log('inside Add to Firebae');\n   const dispatch = useDispatch()\n    let pho = []\n    let files = []\n    console.log('heree');\n    console.log(isExtraPhotos);\n    console.log(files1);\n    console.log(isMainPhoto);\n    console.log(mainFile);\n    \n\n    product?.morePhotos.map((photo, idx) => {\n        if (files[0][idx] == null) {\n            pho[idx] = photo\n            files[0][idx] = photo\n        } else if (files[0][idx] != null) {\n            pho[idx] = files[0][idx]\n        }\n    })\n\n\n\n    // let itemsProcessed = 0\n    // let itemsProcessed1 = 0\n    // let haveFiles = false\n    // files[0].map((file, idx) => {\n\n    //     if (typeof file == \"object\") {\n    //         haveFiles = true\n    //         const fileName = file?.name;\n    //         const storage = getStorage(app)\n    //         const StorageRef = ref(storage, `images/productImages/${product._id}/${fileName}`)\n    //         const uploadTask = uploadBytesResumable(StorageRef, file);\n    //         // Register three observers:\n    //         // 1. 'state_changed' observer, called any time the state changes\n    //         // 2. Error observer, called on failure\n    //         // 3. Completion observer, called on successful completion\n    //         uploadTask.on('state_changed', (snapshot) => {\n    //             // Observe state change events such as progress, pause, and resume\n    //             // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n    //             const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    //             console.log('Upload is ' + progress + '% done');\n    //             switch (snapshot.state) {\n    //                 case 'paused':\n    //                     console.log('Upload is paused');\n    //                     break;\n    //                 case 'running':\n    //                     console.log('Upload is running');\n    //                     break;\n    //                 default:\n    //             }\n    //             console.log('Upload is ' + progress + '% done');\n    //         },\n    //         (error) => {\n    //             // Handle unsuccessful uploads\n    //             console.log(error);\n    //         },\n    //         async () => {\n    //             // Handle successful uploads on complete\n    //             // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n    //             await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n    //                 console.log('File available at', downloadURL);\n    //                 // pho.push(downloadURL)\n    //                 pho[idx] = downloadURL\n    //                 itemsProcessed++\n    //                 let pro = {};\n    //                 if (itemsProcessed >= files.length) {\n    //                     if(isMainPhoto){\n    //                         pro = { ...product, img: pho }\n    //                     }else if (isMorePhoto){\n    //                         pro = { ...product, morePhotos: pho }\n    //                     }\n    //                     pro = { ...product, morePhotos: pho }\n    //                     console.log(pro);\n    //                     updateProducts(pro._id, pro, dispatch)\n    //                     console.log(\"Success, we need to REFRSH\");\n    //                     return pro;\n    //                 }\n\n    //             });\n    //         });\n    //     }\n\n    // })\n    // if (!haveFiles) {\n    //     console.log(\"We dont have files and need to REFRSH\");        \n    // }\n    console.log(pho);\n\n}\n"]},"metadata":{},"sourceType":"module"}