{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\nexport default function AddPhotoToFireBase(files1, product, dispatch) {\n  console.log(\"inFire\");\n  console.log(files1);\n  console.log(product.morePhotos);\n  let pho = [];\n  let files = new Array(files1);\n  console.log(files[0]);\n  console.log(product.morePhotos);\n  product === null || product === void 0 ? void 0 : product.morePhotos.map((photo, idx) => {\n    if (files[0][idx] == null) {\n      console.log(\"file null\");\n      console.log(photo);\n      pho[idx] = photo;\n      files[0][idx] = photo;\n    } else if (files[0][idx] != null) {\n      console.log(\"file not null\");\n      console.log(files[0][idx]);\n      pho[idx] = files[0][idx];\n    }\n  });\n  let itemsProcessed = 0;\n  let itemsProcessed1 = 0;\n  console.log(\"upload photo\");\n  console.log(files[0]); //  console.log(idx);\n  //  files.map((file, idx) => { \n  //   const fileName = product._id + file.name;\n\n  if (Object.keys(file[idx])[0] == \"File\") {\n    console.log(\"WE GETTING SOMEWHERE\");\n    const storage = getStorage(app); //   const StorageRef = ref(storage, fileName)\n    //   const uploadTask = uploadBytesResumable(StorageRef, file);\n    //   // Register three observers:\n    //   // 1. 'state_changed' observer, called any time the state changes\n    //   // 2. Error observer, called on failure\n    //   // 3. Completion observer, called on successful completion\n    //   uploadTask.on('state_changed',\n    //     (snapshot) => {\n    //       // Observe state change events such as progress, pause, and resume\n    //       // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n    //       const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    //       console.log('Upload is ' + progress + '% done');\n    //       switch (snapshot.state) {\n    //         case 'paused':\n    //           console.log('Upload is paused');\n    //           break;\n    //         case 'running':\n    //           console.log('Upload is running');\n    //           break;\n    //         default:\n    //       }\n    //       console.log('Upload is ' + progress + '% done');\n    //     },\n    //     (error) => {\n    //       // Handle unsuccessful uploads\n    //       console.log(error);        },\n    //       async () => {\n    //       // Handle successful uploads on complete\n    //       // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n    //     await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n    //         console.log('File available at', downloadURL);\n    //         // pho.push(downloadURL)\n    //         pho[idx] = downloadURL\n    //         itemsProcessed++\n    //         let pro={};\n    //         if(itemsProcessed >= files.length){\n    //              pro = {...product, morePhotos: pho }\n    //               console.log(pro);\n    //              updateProducts(pro._id, pro, dispatch)\n    //             return pro;\n    //         }\n    //       });    \n    //     });      \n    //     })      \n  }\n\n  console.log(pho);\n}\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","addPhotos","updateProducts","AddPhotoToFireBase","files1","product","dispatch","console","log","morePhotos","pho","files","Array","map","photo","idx","itemsProcessed","itemsProcessed1","Object","keys","file","storage"],"mappings":"AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,oBAA1B,EAAgDC,cAAhD,QAAsE,kBAAtE;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,eAAe,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,OAApC,EAA6CC,QAA7C,EAAwD;AACrEC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,UAApB;AACE,MAAIC,GAAG,GAAE,EAAT;AACA,MAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUR,MAAV,CAAZ;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAAC,CAAD,CAAjB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,UAApB;AACAJ,EAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEI,UAAT,CAAoBI,GAApB,CAAwB,CAACC,KAAD,EAAQC,GAAR,KAAe;AACnC,QAAGJ,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,KAAgB,IAAnB,EAAwB;AACpBR,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACAJ,MAAAA,GAAG,CAACK,GAAD,CAAH,GAASD,KAAT;AACAH,MAAAA,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,IAAgBD,KAAhB;AACH,KALD,MAKM,IAAIH,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,KAAiB,IAArB,EAA0B;AAC5BR,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,CAAZ;AACAL,MAAAA,GAAG,CAACK,GAAD,CAAH,GAASJ,KAAK,CAAC,CAAD,CAAL,CAASI,GAAT,CAAT;AACH;AAEJ,GAZD;AAgBA,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,eAAe,GAAG,CAAtB;AACEV,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACCD,EAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAAC,CAAD,CAAjB,EA5BgE,CA6BjE;AAGF;AACA;;AAGF,MAAGO,MAAM,CAACC,IAAP,CAAYC,IAAI,CAACL,GAAD,CAAhB,EAAuB,CAAvB,KAA6B,MAAhC,EAAwC;AACpCR,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACF,UAAMa,OAAO,GAAGzB,UAAU,CAACI,GAAD,CAA1B,CAFsC,CAG1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACK;;AACDO,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAEH;KAxFuBP,kB","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\n\nexport default function AddPhotoToFireBase(files1, product, dispatch)  {    \n  console.log(\"inFire\");\n  console.log(files1);\n  console.log(product.morePhotos);\n    let pho =[]\n    let files = new Array(files1)\n\n    console.log(files[0]);\n    console.log(product.morePhotos);\n    product?.morePhotos.map((photo, idx )=>{\n        if(files[0][idx]== null){\n            console.log(\"file null\");\n            console.log(photo);\n            pho[idx]=photo\n            files[0][idx] = photo\n        }else if (files[0][idx] != null){\n            console.log(\"file not null\");\n            console.log(files[0][idx]);\n            pho[idx]=files[0][idx]\n        }\n       \n    }\n    )\n    \n      \n    let itemsProcessed = 0\n    let itemsProcessed1 = 0      \n      console.log(\"upload photo\");\n       console.log(files[0]);\n      //  console.log(idx);\n\n\n    //  files.map((file, idx) => { \n    //   const fileName = product._id + file.name;\n\n\n  if(Object.keys(file[idx])[0] == \"File\" ){\n      console.log(\"WE GETTING SOMEWHERE\");\n    const storage = getStorage(app)\n//   const StorageRef = ref(storage, fileName)\n\n//   const uploadTask = uploadBytesResumable(StorageRef, file);\n//   // Register three observers:\n//   // 1. 'state_changed' observer, called any time the state changes\n//   // 2. Error observer, called on failure\n//   // 3. Completion observer, called on successful completion\n//   uploadTask.on('state_changed',\n//     (snapshot) => {\n//       // Observe state change events such as progress, pause, and resume\n//       // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//       const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//       console.log('Upload is ' + progress + '% done');\n//       switch (snapshot.state) {\n//         case 'paused':\n//           console.log('Upload is paused');\n//           break;\n//         case 'running':\n//           console.log('Upload is running');\n//           break;\n//         default:\n//       }\n//       console.log('Upload is ' + progress + '% done');\n//     },\n//     (error) => {\n//       // Handle unsuccessful uploads\n//       console.log(error);        },\n//       async () => {\n//       // Handle successful uploads on complete\n//       // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n//     await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//         console.log('File available at', downloadURL);\n//         // pho.push(downloadURL)\n//         pho[idx] = downloadURL\n//         itemsProcessed++\n//         let pro={};\n//         if(itemsProcessed >= files.length){\n//              pro = {...product, morePhotos: pho }\n//               console.log(pro);\n//              updateProducts(pro._id, pro, dispatch)\n//             return pro;\n//         }\n        \n//       });    \n//     });      \n//     })      \n    }\n    console.log(pho);\n    \n}\n"]},"metadata":{},"sourceType":"module"}