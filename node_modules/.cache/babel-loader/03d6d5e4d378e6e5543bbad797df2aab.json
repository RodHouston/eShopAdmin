{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\nexport default function AddPhotoToFireBase(files1, product, dispatch) {\n  console.log(\"inFire\");\n  console.log(files1);\n  console.log(product.morePhotos);\n  let pho = [];\n  let files = new Array(files1);\n  console.log(files[0]);\n  console.log(product.morePhotos);\n  product === null || product === void 0 ? void 0 : product.morePhotos.map((photo, idx) => {\n    if (files[0][idx] == null) {\n      console.log(\"file null\");\n      console.log(photo);\n      pho[idx] = photo;\n      files[0][idx] = photo;\n    } else if (files[0][idx] != null) {\n      console.log(\"file not null\");\n      console.log(files[0][idx]);\n      pho[idx] = files[0][idx];\n    }\n  });\n  let itemsProcessed = 0;\n  let itemsProcessed1 = 0;\n  console.log(\"upload photo\");\n  console.log(files[0]); //  console.log(idx);\n\n  files[0].map((file, idx) => {\n    console.log(\"WE GETTING SOMEWHERE\");\n    console.log(product._id);\n    console.log(typeof file);\n    let haveFiles = false;\n\n    if (typeof file == \"object\") {\n      haveFiles = true;\n      console.log(\"WE GETTING CLOSE\");\n      const fileName = product._id + file.name;\n      const storage = getStorage(app);\n      const StorageRef = ref(storage, fileName);\n      const uploadTask = uploadBytesResumable(StorageRef, file); // Register three observers:\n      // 1. 'state_changed' observer, called any time the state changes\n      // 2. Error observer, called on failure\n      // 3. Completion observer, called on successful completion\n\n      uploadTask.on('state_changed', snapshot => {\n        // Observe state change events such as progress, pause, and resume\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log('Upload is ' + progress + '% done');\n\n        switch (snapshot.state) {\n          case 'paused':\n            console.log('Upload is paused');\n            break;\n\n          case 'running':\n            console.log('Upload is running');\n            break;\n\n          default:\n        }\n\n        console.log('Upload is ' + progress + '% done');\n      }, error => {\n        // Handle unsuccessful uploads\n        console.log(error);\n      }, async () => {\n        // Handle successful uploads on complete\n        // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n        await getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          console.log('File available at', downloadURL); // pho.push(downloadURL)\n\n          pho[idx] = downloadURL;\n          itemsProcessed++;\n          let pro = {};\n\n          if (itemsProcessed >= files.length) {\n            pro = { ...product,\n              morePhotos: pho\n            };\n            console.log(pro);\n            updateProducts(pro._id, pro, dispatch);\n            return pro;\n          }\n        });\n      });\n    }\n  });\n\n  if (haveFiles) {\n    console.log(\"We need to REFRSH\");\n  }\n\n  console.log(pho);\n}\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","addPhotos","updateProducts","AddPhotoToFireBase","files1","product","dispatch","console","log","morePhotos","pho","files","Array","map","photo","idx","itemsProcessed","itemsProcessed1","file","_id","haveFiles","fileName","name","storage","StorageRef","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","state","error","then","downloadURL","pro","length"],"mappings":"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","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\nimport { addPhotos } from \"./productRedux\";\nimport { updateProducts } from \"./apiCalls\";\n\nexport default function AddPhotoToFireBase(files1, product, dispatch)  {    \n  console.log(\"inFire\");\n  console.log(files1);\n  console.log(product.morePhotos);\n    let pho =[]\n    let files = new Array(files1)\n\n    console.log(files[0]);\n    console.log(product.morePhotos);\n    product?.morePhotos.map((photo, idx )=>{\n        if(files[0][idx]== null){\n            console.log(\"file null\");\n            console.log(photo);\n            pho[idx]=photo\n            files[0][idx] = photo\n        }else if (files[0][idx] != null){\n            console.log(\"file not null\");\n            console.log(files[0][idx]);\n            pho[idx]=files[0][idx]\n        }\n       \n    }\n    )\n    \n      \n    let itemsProcessed = 0\n    let itemsProcessed1 = 0      \n      console.log(\"upload photo\");\n       console.log(files[0]);\n      //  console.log(idx);\n\n\n     files[0].map((file, idx) => { \n      \n    console.log(\"WE GETTING SOMEWHERE\");\n    console.log(product._id);\n    console.log(typeof file );\n        let haveFiles = false\n  if(typeof file == \"object\" ){\n      haveFiles = true\n    console.log(\"WE GETTING CLOSE\");\n    const fileName = product._id + file.name;\n    const storage = getStorage(app)\n  const StorageRef = ref(storage, fileName)\n\n  const uploadTask = uploadBytesResumable(StorageRef, file);\n  // Register three observers:\n  // 1. 'state_changed' observer, called any time the state changes\n  // 2. Error observer, called on failure\n  // 3. Completion observer, called on successful completion\n  uploadTask.on('state_changed',\n    (snapshot) => {\n      // Observe state change events such as progress, pause, and resume\n      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n      const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      console.log('Upload is ' + progress + '% done');\n      switch (snapshot.state) {\n        case 'paused':\n          console.log('Upload is paused');\n          break;\n        case 'running':\n          console.log('Upload is running');\n          break;\n        default:\n      }\n      console.log('Upload is ' + progress + '% done');\n    },\n    (error) => {\n      // Handle unsuccessful uploads\n      console.log(error);        },\n      async () => {\n      // Handle successful uploads on complete\n      // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n    await getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n        console.log('File available at', downloadURL);\n        // pho.push(downloadURL)\n        pho[idx] = downloadURL\n        itemsProcessed++\n        let pro={};\n        if(itemsProcessed >= files.length){\n             pro = {...product, morePhotos: pho }\n              console.log(pro);\n             updateProducts(pro._id, pro, dispatch)\n            return pro;\n        }\n        \n      });    \n    });           \n     \n    }\n\n})\nif(haveFiles){\n    console.log(\"We need to REFRSH\");\n}\n    console.log(pho);\n    \n}\n"]},"metadata":{},"sourceType":"module"}