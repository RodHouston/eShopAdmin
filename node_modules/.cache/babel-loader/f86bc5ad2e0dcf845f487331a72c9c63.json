{"ast":null,"code":"import { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport { addPhotos } from \"./productRedux\";\nexport default async function AddPhotoToFireBase(file) {\n  // const extraPhotos = useSelector(state => state.product.extraPhotos)\n  // const dispatch = useDispatch()\n  console.log(\"TRYING TO GET HERE\");\n  let pho = file;\n  console.log(\"multi insde upload\");\n  let itemsProcessed = 0;\n  let itemsProcessed1 = 0; //   console.log(\"upload photo\");\n  //   //  console.log(file);\n  //   //  console.log(idx);\n  //   const fileName = new Date().getTime() + file.name;\n  //   const storage = getStorage(app)\n  //   const StorageRef = ref(storage, fileName)\n  //   const uploadTask = uploadBytesResumable(StorageRef, file);\n  //   // Register three observers:\n  //   // 1. 'state_changed' observer, called any time the state changes\n  //   // 2. Error observer, called on failure\n  //   // 3. Completion observer, called on successful completion\n  //   uploadTask.on('state_changed',\n  //     (snapshot) => {\n  //       // Observe state change events such as progress, pause, and resume\n  //       // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n  //       const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n  //       console.log('Upload is ' + progress + '% done');\n  //       switch (snapshot.state) {\n  //         case 'paused':\n  //           console.log('Upload is paused');\n  //           break;\n  //         case 'running':\n  //           console.log('Upload is running');\n  //           break;\n  //         default:\n  //       }\n  //       console.log('Upload is ' + progress + '% done');\n  //     },\n  //     (error) => {\n  //       // Handle unsuccessful uploads\n  //       console.log(error);        },\n  //      () => {\n  //       // Handle successful uploads on complete\n  //       // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n  //     getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n  //         console.log('File available at', downloadURL);\n  //         pho = downloadURL\n  //       });         \n  //     })        \n\n  console.log(pho);\n  return pho;\n}\n_c = AddPhotoToFireBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPhotoToFireBase\");","map":{"version":3,"sources":["/Users/roderickhouston/Desktop/GA Projects/eCommerceAdmin/src/redux/toFirebase.js"],"names":["useDispatch","useSelector","getStorage","ref","uploadBytesResumable","getDownloadURL","app","addPhotos","AddPhotoToFireBase","file","console","log","pho","itemsProcessed","itemsProcessed1"],"mappings":"AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,oBAA1B,EAAgDC,cAAhD,QAAsE,kBAAtE;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,eAAe,eAAgBC,kBAAhB,CAAmCC,IAAnC,EAAyC;AACpD;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,MAAIC,GAAG,GAAGH,IAAV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,MAAIE,cAAc,GAAG,CAArB;AACA,MAAIC,eAAe,GAAG,CAAtB,CAPoD,CASpD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,SAAOA,GAAP;AACH;KAnD8BJ,kB","sourcesContent":["\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\"\nimport { addPhotos } from \"./productRedux\";\n\nexport default async  function AddPhotoToFireBase(file) {\n    // const extraPhotos = useSelector(state => state.product.extraPhotos)\n    // const dispatch = useDispatch()\n    console.log(\"TRYING TO GET HERE\");\n    let pho = file    \n    console.log(\"multi insde upload\");      \n    let itemsProcessed = 0\n    let itemsProcessed1 = 0   \n   \n    //   console.log(\"upload photo\");\n    //   //  console.log(file);\n    //   //  console.log(idx);\n    //   const fileName = new Date().getTime() + file.name;\n    //   const storage = getStorage(app)\n    //   const StorageRef = ref(storage, fileName)\n\n    //   const uploadTask = uploadBytesResumable(StorageRef, file);\n    //   // Register three observers:\n    //   // 1. 'state_changed' observer, called any time the state changes\n    //   // 2. Error observer, called on failure\n    //   // 3. Completion observer, called on successful completion\n    //   uploadTask.on('state_changed',\n    //     (snapshot) => {\n    //       // Observe state change events such as progress, pause, and resume\n    //       // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n    //       const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    //       console.log('Upload is ' + progress + '% done');\n    //       switch (snapshot.state) {\n    //         case 'paused':\n    //           console.log('Upload is paused');\n    //           break;\n    //         case 'running':\n    //           console.log('Upload is running');\n    //           break;\n    //         default:\n    //       }\n    //       console.log('Upload is ' + progress + '% done');\n    //     },\n    //     (error) => {\n    //       // Handle unsuccessful uploads\n    //       console.log(error);        },\n    //      () => {\n    //       // Handle successful uploads on complete\n    //       // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n    //     getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n    //         console.log('File available at', downloadURL);\n    //         pho = downloadURL\n    //       });         \n    //     })        \n    console.log(pho);\n    return pho\n}\n"]},"metadata":{},"sourceType":"module"}